import type { NormalizedCacheObject } from '@apollo/client';
import { ApolloClient, concat, HttpLink, InMemoryCache } from '@apollo/client';
import { setContext } from '@apollo/client/link/context';
import merge from 'deepmerge';
import isEqual from 'lodash/isEqual';
import type { GetServerSidePropsContext, NextPageContext } from 'next';
import type { AppContext } from 'next/app';
import { useMemo } from 'react';

// generated by fragment matcher plugin

// enable when server has cache store
// import { createPersistedQueryLink } from '@apollo/client/link/persisted-queries'
// import { sha256 } from 'crypto-hash'

export type ApolloClientWithCache = ApolloClient<NormalizedCacheObject>;

export type WithApolloPageContext = {
  apolloClient: ApolloClientWithCache;
  apolloState: NormalizedCacheObject;
  ctx: any;
  page: any;
} & NextPageContext &
  AppContext;

export type PropsContext =
  | WithApolloPageContext
  | GetServerSidePropsContext
  | any;

let globalApolloClient: ApolloClientWithCache;

export const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__';

const API_URL =
  process.env.GRAPHQL_API_URL || process.env.NEXT_PUBLIC_GRAPHQL_API_URL;

/**
 * Link options
 */
/**
 * Creates and configures the ApolloClient
 * @param  {Object} [initialState={}]
 * @param {Object} ctx
 */
function createApolloClient(_ctx?: PropsContext) {
  const ssrMode = typeof window === 'undefined';
  const cache = new InMemoryCache({});
  // enable when server has cache store
  // const persistedQueriesLink = createPersistedQueryLink({ sha256 })

  const asyncAuthLink = setContext((request) => {
    return {
      ...request,
      headers: {
        Authorization: `Bearer ${process.env.GRAPHQL_API_TOKEN}`,
      },
    };
  });

  const httpLink = new HttpLink({
    uri: API_URL,
    fetchOptions: {
      mode: 'no-cors', // no-cors, *cors, same-origin
    },
  });

  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient
  return new ApolloClient({
    uri: API_URL,
    link: concat(asyncAuthLink, httpLink),
    cache,
    ssrMode,
    // enable when server has cache store link: setAuthorizationLink(ctx).concat(persistedQueriesLink.concat(httpLink)),
    connectToDevTools: process?.env?.NODE_ENV !== 'production' || false,
  });
}

/**
 * Always creates a new apollo client on the server
 * Creates or reuses apollo client in the browser.
 * @param  {Object} initialState
 */
export const initializeApollo = (ctx?: PropsContext, initialState = null) => {
  const apolloClient = globalApolloClient ?? createApolloClient(ctx);

  // If your page has Next.js data fetching methods that use Apollo Client, the initial state
  // gets hydrated here
  if (initialState) {
    // Get existing cache, loaded during client side data fetching
    const existingCache = apolloClient.extract();

    // Merge the existing cache into data passed from getStaticProps/getServerSideProps
    const data = merge(initialState, existingCache, {
      // combine arrays using object equality (like in sets)
      arrayMerge: (destinationArray, sourceArray) => [
        ...sourceArray,
        ...destinationArray.filter((d) =>
          sourceArray.every((s) => !isEqual(d, s))
        ),
      ],
    });

    // Restore the cache with the merged data
    apolloClient.cache.restore(data);
  }

  // For SSG and SSR always create a new Apollo Client
  if (typeof window === 'undefined') return apolloClient;
  // Create the Apollo Client once in the client
  if (!globalApolloClient) globalApolloClient = apolloClient;

  return apolloClient;
};

/**
 * Returns the apollo state.
 *
 * @param {ApolloClient<NormalizedCacheObject>} client
 * @returns {NormalizedCacheObject}
 */
export const getApolloState = (
  client: ApolloClient<NormalizedCacheObject>
): NormalizedCacheObject => {
  return client.cache.extract();
};

/**
 *  Adds Apollo State to pageprops
 *
 * @param {ApolloClient<NormalizedCacheObject} client
 * @param {PageProps} pageProps
 * @returns {PageProps} pageProps
 */
export const addApolloState = (
  client: ApolloClient<NormalizedCacheObject>,
  pageProps: any
) => {
  if (pageProps?.props) {
    // eslint-disable-next-line no-param-reassign
    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();
  }
  return pageProps;
};

/**
 * Returns an instance of apollo client.
 *
 * @param {PageProps} pageProps
 * @returns {ApolloClient<NormalizedCacheObject>}
 */
export const useApollo = (
  pageProps: any
): ApolloClient<NormalizedCacheObject> => {
  const state = pageProps[APOLLO_STATE_PROP_NAME];
  const store = useMemo(() => initializeApollo(undefined, state), [state]);
  return store;
};
